/**
 * generated by Xtext
 */
package org.uqbar.paco.dsl.scoping;

import com.google.common.base.Objects;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.SimpleScope;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.uqbar.paco.dsl.tortugaDSL.PARAM;
import org.uqbar.paco.dsl.tortugaDSL.TO;
import org.uqbar.paco.dsl.tortugaDSL.VARIABLE_REF;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it
 */
@SuppressWarnings("all")
public class TortugaDSLScopeProvider extends AbstractDeclarativeScopeProvider {
  public IScope scope_VARIABLE_REF_toVar(final VARIABLE_REF ref, final EReference ereference) {
    final IScope scope = this.delegateGetScope(ref, ereference);
    EObject container = ref.eContainer();
    while ((!Objects.equal(container, null))) {
      if ((container instanceof TO)) {
        EList<PARAM> _parameters = ((TO) container).getParameters();
        final Function1<PARAM, IEObjectDescription> _function = new Function1<PARAM, IEObjectDescription>() {
          public IEObjectDescription apply(final PARAM p) {
            String _name = p.getName();
            return EObjectDescription.create(_name, p);
          }
        };
        List<IEObjectDescription> _map = ListExtensions.<PARAM, IEObjectDescription>map(_parameters, _function);
        return new SimpleScope(scope, _map);
      } else {
        EObject _eContainer = container.eContainer();
        container = _eContainer;
      }
    }
    return scope;
  }
}
